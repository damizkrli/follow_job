name: Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H followjob.fr >> ~/.ssh/known_hosts

      - name: Copy project to server (/var/www/follow_job)
        run: |
          rsync -az --delete \
            --exclude '.git' \
            --exclude 'node_modules' \
            --exclude 'vendor' \
            --exclude '.env.local' \
            --exclude 'var' \
            -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            ./ admin@followjob.fr:/var/www/follow_job

      - name: Push .env.local to server
        run: |
          echo "${{ secrets.ENV_LOCAL_FILE }}" > .env.local
          rsync -az -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" .env.local admin@followjob.fr:/var/www/follow_job/.env.local
          rm .env.local

      - name: SSH into server and deploy
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no admin@followjob.fr << 'EOF'
            set -e
            cd /var/www/follow_job

            echo "Stopping old containers"
            docker-compose down --remove-orphans

            echo "Pulling latest images"
            docker-compose pull

            echo "Rebuilding containers"
            docker-compose up -d --build

            echo "Installing composer dependencies"
            docker exec symfony_php composer install --no-dev --optimize-autoloader --classmap-authoritative

            echo "Running migrations"
            docker exec symfony_php php bin/console doctrine:migrations:migrate --no-interaction

            echo "Clearing & warming up cache..."
            docker exec symfony_php php bin/console cache:clear --no-warmup
            docker exec symfony_php php bin/console cache:warmup

            echo "Fixing permissions on var/"
            docker exec symfony_php chown -R www-data:www-data var

            echo "Pruning dangling images"
            docker image prune -f

            echo "âœ… Deployment done!"
          EOF
